name: CI

# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [main]
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:
      inputs:
      version:
        description: "Deploy Blog Server"
        required: true

jobs:
  build_and_push_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # - name: Recreate SSL certs
      #   run: |
      #     cd nginx
      #     mkdir -p ./certs
      #     echo "${{ secrets.SSL_CERT_PEM }}" | base64 -d > ./certs/vvasylkovskyi_com.pem
      #     echo "${{ secrets.SSL_CERT_KEY }}" | base64 -d > ./certs/vvasylkovskyi_com.key

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Build and Push Nginx Container Image
      #   run: |
      #     cd nginx
      #     docker buildx build -f ./Dockerfile.nginx -t ${{ secrets.DOCKER_USERNAME }}/ai-personal-lawyer-nginx --platform linux/arm64 --push .

      # - name: Build and Push Server Container Image
      #   run: |
      #     cd server
      #     docker buildx build -f ./deploy/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/ai-personal-lawyer-server --platform linux/arm64 --push .

      # - name: Build and Push Frontend Container Image
      #   run: |
      #     cd frontend
      #     docker buildx build -f ./deploy/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/ai-personal-lawyer-frontend --platform linux/arm64 --push .

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Install cloudflared
        run: |
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/cloudflared

      - name: Setup SSH Config for Cloudflare Tunnel
        run: |
          echo "Host ${{ secrets.CF_SSH_HOST }}" >> ~/.ssh/config
          echo "  ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Deploy docker-compose to Raspberry Pi
        run: |
          scp ./docker-compose.yaml ${{ secrets.CF_SSH_USER }}@${{ secrets.CF_SSH_HOST }}:/home/${{ secrets.CF_SSH_USER }}/project/docker-compose.yaml

          ssh ${{ secrets.CF_SSH_USER }}@${{ secrets.CF_SSH_HOST }} \
              'docker compose -f /home/${{ secrets.CF_SSH_USER }}/project/docker-compose.yaml pull && docker compose -f /home/${{ secrets.CF_SSH_USER }}/project/docker-compose.yaml up -d'

      - name: Log in to Docker on Remote Host
        run: |
          ssh ${{ secrets.CF_SSH_USER }}@${{ secrets.CF_SSH_HOST }} << 'ENDSSH'
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          ENDSSH

      - name: Pull Docker Images
        run: |
          ssh ${{ secrets.CF_SSH_USER }}@${{ secrets.CF_SSH_HOST }} << 'ENDSSH'
          cd ~/${{ secrets.RPI_PROJECT_FOLDER }}
          docker-compose pull 
          ENDSSH

      - name: Restart Docker Images
        run: |
          ssh ${{ secrets.CF_SSH_USER }}@${{ secrets.CF_SSH_HOST }} << 'ENDSSH'
          docker stop $(docker ps -q)
          docker rm $(docker ps -aq)
          docker-compose up -d
          ENDSSH
