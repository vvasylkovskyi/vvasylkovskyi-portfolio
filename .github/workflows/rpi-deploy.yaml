# name: CI

# # 1
# # Controls when the workflow will run
# on:
#   # Triggers the workflow on push events but only for the master branch
#   push:
#     branches: [main]
#     # Allows you to run this workflow manually from the Actions tab
#     workflow_dispatch:
#       inputs:
#       version:
#         description: 'Deploy Blog Server'
#         required: true

# jobs:
#   build_and_push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out the repo
#         uses: actions/checkout@v4

#       - name: Log in to Docker Hub
#         uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Container Image
#         run: |
#           docker build -f ./deploy/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/vvasylkovskyi-portfolio .
#           docker push ${{ secrets.DOCKER_USERNAME }}/vvasylkovskyi-portfolio

#   deploy_to_rpi:
#     runs-on: ubuntu-latest
#     needs: build_and_push
#     steps:
#       - name: Check out the repo
#         uses: actions/checkout@v4

#       - name: Log in to Docker Hub
#         uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Setup SSH Key
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa

#       - name: Install cloudflared
#         run: |
#           curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
#           chmod +x cloudflared
#           sudo mv cloudflared /usr/local/bin/cloudflared

#       - name: Setup SSH Config for Cloudflare Tunnel
#         run: |
#           echo "Host ${{ secrets.CF_SSH_HOST }}" >> ~/.ssh/config
#           echo "  ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h" >> ~/.ssh/config
#           echo "  StrictHostKeyChecking no" >> ~/.ssh/config
#           echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
#           chmod 600 ~/.ssh/config

#       - name: Upload .env file
#         run: |
#           echo "${{ secrets.ENV_FILE }}" > .env
#           scp .env ${{ secrets.CF_SSH_USER }}@${{ secrets.CF_SSH_HOST }}:/home/${{ secrets.CF_SSH_USER }}/.env

#       - name: Deploy docker-compose to Raspberry Pi
#         run: |
#           scp ./docker-compose.yaml ${{ secrets.CF_SSH_USER }}@${{ secrets.CF_SSH_HOST }}:/home/${{ secrets.CF_SSH_USER }}/docker-compose.yaml

#       - name: Log in to Docker on Remote Host
#         run: |
#           ssh ${{ secrets.CF_SSH_USER }}@${{ secrets.CF_SSH_HOST }} << 'ENDSSH'
#           docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#           ENDSSH

#       - name: Pull Docker Images
#         run: |
#           ssh ${{ secrets.CF_SSH_USER }}@${{ secrets.CF_SSH_HOST }} << 'ENDSSH'
#           docker-compose pull
#           ENDSSH

#       - name: Restart Docker Images
#         run: |
#           ssh ${{ secrets.CF_SSH_USER }}@${{ secrets.CF_SSH_HOST }} << 'ENDSSH'
#           docker stop $(docker ps -q)
#           docker rm $(docker ps -aq)
#           docker-compose up -d
#           ENDSSH
